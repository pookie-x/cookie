class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(auto it:flights){
            int u=it[0];
            int v=it[1];
            int w=it[2];
            adj[u].push_back({v,w});
        }
        queue<pair<int,int>>q;
        vector<int>dist(n,1e9);
        dist[src]=0;
        q.push({src,0});
        int steps=0;
       
          while(!q.empty() &&steps<=k) {
            int size = q.size(); // Size of the current level
            for(int i = 0; i < size; ++i) {
                int node = q.front().first;
                int dis = q.front().second;
                q.pop();
                
                for(auto it : adj[node]) {
                    int adjNode = it.first;
                    int weight = it.second;
                    if(dist[adjNode] > weight + dis) {
                        dist[adjNode] = weight + dis;
                        q.push({adjNode, dist[adjNode]});
                    }
                }
            }
            steps++;  
          
        }  
        
        for(auto it:dist) cout<<it<<" ";
        if(dist[dst]==1e9) return -1;
        return dist[dst];
            
    }
};